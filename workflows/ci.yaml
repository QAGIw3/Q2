# .github/workflows/ci.yaml
#
# Reusable CI workflow for Python-based microservices.

name: Q Platform CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - agentQ
          - AuthQ
          - H2M
          - IntegrationHub
          - KnowledgeGraphQ
          - managerQ
          - VectorStoreQ
          - WorkflowWorker
          - shared # Also test shared libraries
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python

    - name: Install dependencies for ${{ matrix.service }}
      run: |
        python -m pip install --upgrade pip build
        # First, install local shared packages
        ./scripts/install_local_packages.sh
        # Then, install the service's specific requirements using the constraints file
        if [ -f "${{ matrix.service }}/requirements.txt" ]; then
          pip install -r ${{ matrix.service }}/requirements.txt -c constraints.txt
        fi
        # Install test dependencies using constraints
        pip install flake8 pytest -c constraints.txt

    - name: Lint with flake8
      working-directory: ./${{ matrix.service }}
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check for tests
      id: test-check
      run: |
        if [ -d "${{ matrix.service }}/tests" ] && [ -n "$(find ${{ matrix.service }}/tests -name '*.py' -print -quit)" ]; then
          echo "run_tests=true" >> $GITHUB_OUTPUT
        else
          echo "run_tests=false" >> $GITHUB_OUTPUT
        fi

    - name: Test with pytest
      if: steps.test-check.outputs.run_tests == 'true'
      working-directory: ./${{ matrix.service }}
      run: |
        pytest

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      continue-on-error: true # Do not fail the build on findings yet

  build-and-test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./WebAppQ/app
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'WebAppQ/app/package-lock.json'

    - name: Install dependencies
      run: npm install

    - name: Lint with ESLint
      run: npm run lint

    - name: Test with Jest
      run: npm test -- --watchAll=false

  docker-build-and-push:
    needs: [build-and-test, build-and-test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - agentQ
          - AuthQ
          - H2M
          - IntegrationHub
          - KnowledgeGraphQ
          - managerQ
          - VectorStoreQ
          - WorkflowWorker
          - WebAppQ
    steps:
      - uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest'
          format: 'table'
          severity: 'CRITICAL,HIGH'

  test-integration:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install core test dependencies using constraints
          pip install pytest httpx -c ../../constraints.txt
          # Install integration-specific dependencies
          pip install -r tests/integration/requirements.txt
      - name: Run Integration and Contract Tests
        run: |
          # This is a simplified representation. A real CI setup would
          # need to manage the docker-compose network and dependencies
          # like a live Keycloak instance more robustly.
          pytest tests/integration/
          # In a real pipeline, we would run the consumer test to generate the pact,
          # publish the pact, and then the provider build would verify it.
          # For now, we just run the tests we have.
          pytest managerQ/tests/test_auth_contract.py
          # The provider verification test is skipped, so we don't run it here.

  run-e2e-tests:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Install AgentSandbox dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r AgentSandbox/requirements.txt
      
      - name: Run E2E Test Scenario
        # This is a simplified representation. A real setup would require:
        # 1. A way to start all the services (e.g., docker-compose up)
        # 2. A way to wait for them to be healthy.
        # 3. Running the scenario against the live services.
        # For now, we just invoke the script to check for syntax.
        run: |
          python scripts/run_scenario.py auth_and_search_e2e 