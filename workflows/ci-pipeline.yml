name: Q Platform CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: "Lint Code"
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Python lint dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      
      - name: Lint Python code
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'WebAppQ/app/package-lock.json'

      - name: Install frontend dependencies
        run: npm install --prefix WebAppQ/app
        
      - name: Lint frontend code
        run: npm run lint --prefix WebAppQ/app

  test-backend:
    name: "Test Backend - ${{ matrix.service }}"
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - agentQ
          - AuthQ
          - H2M
          - IntegrationHub
          - KnowledgeGraphQ
          - managerQ
          - QuantumPulse
          - VectorStoreQ
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies for ${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ matrix.service }}/requirements.txt
      
      - name: Run tests for ${{ matrix.service }}
        run: |
          export PYTHONPATH=$(pwd)
          pytest ${{ matrix.service }}/tests/
  
  test-frontend:
    name: "Test Frontend - WebAppQ"
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'WebAppQ/app/package-lock.json'
          
      - name: Install frontend dependencies
        run: npm install --prefix WebAppQ/app
        
      - name: Run frontend tests
        run: npm test --prefix WebAppQ/app -- --watchAll=false

  build-docker-images:
    name: "Build & Push Docker Images"
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - agentQ
          - AuthQ
          - H2M
          - IntegrationHub
          - KnowledgeGraphQ
          - managerQ
          - QuantumPulse
          - VectorStoreQ
          - WebAppQ
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image for ${{ matrix.service }}
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
          # Example for WebAppQ which has a different Dockerfile path
          # file: ./${{ matrix.service }}/Dockerfile 